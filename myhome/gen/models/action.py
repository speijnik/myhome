"""
    MyHomeSERVER1 API

    API provided by the Bticino MyHomeSERVER1 system and used by the MyHomeUp mobile application  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from myhome.gen.configuration import Configuration


class Action:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "arr_events": "list[Event]",
        "arr_events_dis": "list[Event]",
        "id": "int",
        "image": "str",
        "name": "str",
    }

    attribute_map = {
        "arr_events": "arrEvents",
        "arr_events_dis": "arrEventsDis",
        "id": "id",
        "image": "image",
        "name": "name",
    }

    def __init__(
        self,
        arr_events=None,
        arr_events_dis=None,
        id=None,
        image=None,
        name=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """Action - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._arr_events = None
        self._arr_events_dis = None
        self._id = None
        self._image = None
        self._name = None
        self.discriminator = None

        if arr_events is not None:
            self.arr_events = arr_events
        if arr_events_dis is not None:
            self.arr_events_dis = arr_events_dis
        if id is not None:
            self.id = id
        if image is not None:
            self.image = image
        if name is not None:
            self.name = name

    @property
    def arr_events(self):
        """Gets the arr_events of this Action.  # noqa: E501

        Events that automatically trigger the action  # noqa: E501

        :return: The arr_events of this Action.  # noqa: E501
        :rtype: list[Event]
        """
        return self._arr_events

    @arr_events.setter
    def arr_events(self, arr_events):
        """Sets the arr_events of this Action.

        Events that automatically trigger the action  # noqa: E501

        :param arr_events: The arr_events of this Action.  # noqa: E501
        :type: list[Event]
        """

        self._arr_events = arr_events

    @property
    def arr_events_dis(self):
        """Gets the arr_events_dis of this Action.  # noqa: E501

        Events that automatically trigger the action but are disabled  # noqa: E501

        :return: The arr_events_dis of this Action.  # noqa: E501
        :rtype: list[Event]
        """
        return self._arr_events_dis

    @arr_events_dis.setter
    def arr_events_dis(self, arr_events_dis):
        """Sets the arr_events_dis of this Action.

        Events that automatically trigger the action but are disabled  # noqa: E501

        :param arr_events_dis: The arr_events_dis of this Action.  # noqa: E501
        :type: list[Event]
        """

        self._arr_events_dis = arr_events_dis

    @property
    def id(self):
        """Gets the id of this Action.  # noqa: E501

        Action ID  # noqa: E501

        :return: The id of this Action.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Action.

        Action ID  # noqa: E501

        :param id: The id of this Action.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this Action.  # noqa: E501

        Possibly always empty  # noqa: E501

        :return: The image of this Action.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Action.

        Possibly always empty  # noqa: E501

        :param image: The image of this Action.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def name(self):
        """Gets the name of this Action.  # noqa: E501

        Display name  # noqa: E501

        :return: The name of this Action.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Action.

        Display name  # noqa: E501

        :param name: The name of this Action.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Action):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Action):
            return True

        return self.to_dict() != other.to_dict()
