"""
    MyHomeSERVER1 API

    API provided by the Bticino MyHomeSERVER1 system and used by the MyHomeUp mobile application  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from myhome.gen.configuration import Configuration


class ObjectValue:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "power": "bool",
        "dimmer": "int",
        "move": "str",
        "setpoint": "float",
    }

    attribute_map = {
        "power": "power",
        "dimmer": "dimmer",
        "move": "move",
        "setpoint": "setpoint",
    }

    def __init__(
        self,
        power=None,
        dimmer=None,
        move=None,
        setpoint=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """ObjectValue - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._power = None
        self._dimmer = None
        self._move = None
        self._setpoint = None
        self.discriminator = None

        if power is not None:
            self.power = power
        if dimmer is not None:
            self.dimmer = dimmer
        if move is not None:
            self.move = move
        if setpoint is not None:
            self.setpoint = setpoint

    @property
    def power(self):
        """Gets the power of this ObjectValue.  # noqa: E501

        Power on/off  # noqa: E501

        :return: The power of this ObjectValue.  # noqa: E501
        :rtype: bool
        """
        return self._power

    @power.setter
    def power(self, power):
        """Sets the power of this ObjectValue.

        Power on/off  # noqa: E501

        :param power: The power of this ObjectValue.  # noqa: E501
        :type: bool
        """

        self._power = power

    @property
    def dimmer(self):
        """Gets the dimmer of this ObjectValue.  # noqa: E501

        Dimming percentage  # noqa: E501

        :return: The dimmer of this ObjectValue.  # noqa: E501
        :rtype: int
        """
        return self._dimmer

    @dimmer.setter
    def dimmer(self, dimmer):
        """Sets the dimmer of this ObjectValue.

        Dimming percentage  # noqa: E501

        :param dimmer: The dimmer of this ObjectValue.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation
            and dimmer is not None
            and dimmer > 100
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `dimmer`, must be a value less than or equal to `100`"
            )  # noqa: E501
        if (
            self.local_vars_configuration.client_side_validation
            and dimmer is not None
            and dimmer < 0
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `dimmer`, must be a value greater than or equal to `0`"
            )  # noqa: E501

        self._dimmer = dimmer

    @property
    def move(self):
        """Gets the move of this ObjectValue.  # noqa: E501

        Operating mode  # noqa: E501

        :return: The move of this ObjectValue.  # noqa: E501
        :rtype: str
        """
        return self._move

    @move.setter
    def move(self, move):
        """Sets the move of this ObjectValue.

        Operating mode  # noqa: E501

        :param move: The move of this ObjectValue.  # noqa: E501
        :type: str
        """
        allowed_values = ["STOP", "UP", "DOWN"]  # noqa: E501
        if (
            self.local_vars_configuration.client_side_validation
            and move not in allowed_values
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `move` ({}), must be one of {}".format(  # noqa: E501
                    move, allowed_values
                )
            )

        self._move = move

    @property
    def setpoint(self):
        """Gets the setpoint of this ObjectValue.  # noqa: E501

        Desired room temperature  # noqa: E501

        :return: The setpoint of this ObjectValue.  # noqa: E501
        :rtype: float
        """
        return self._setpoint

    @setpoint.setter
    def setpoint(self, setpoint):
        """Sets the setpoint of this ObjectValue.

        Desired room temperature  # noqa: E501

        :param setpoint: The setpoint of this ObjectValue.  # noqa: E501
        :type: float
        """

        self._setpoint = setpoint

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ObjectValue):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ObjectValue):
            return True

        return self.to_dict() != other.to_dict()
