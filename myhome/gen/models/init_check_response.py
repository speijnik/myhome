"""
    MyHomeSERVER1 API

    API provided by the Bticino MyHomeSERVER1 system and used by the MyHomeUp mobile application  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from myhome.gen.configuration import Configuration


class InitCheckResponse:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "actual": "float",
        "init_check": "bool",
        "state_init": "str",
        "total": "float",
    }

    attribute_map = {
        "actual": "actual",
        "init_check": "initCheck",
        "state_init": "stateInit",
        "total": "total",
    }

    def __init__(
        self,
        actual=None,
        init_check=None,
        state_init=None,
        total=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """InitCheckResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._actual = None
        self._init_check = None
        self._state_init = None
        self._total = None
        self.discriminator = None

        self.actual = actual
        self.init_check = init_check
        self.state_init = state_init
        self.total = total

    @property
    def actual(self):
        """Gets the actual of this InitCheckResponse.  # noqa: E501

        Current step in init process  # noqa: E501

        :return: The actual of this InitCheckResponse.  # noqa: E501
        :rtype: float
        """
        return self._actual

    @actual.setter
    def actual(self, actual):
        """Sets the actual of this InitCheckResponse.

        Current step in init process  # noqa: E501

        :param actual: The actual of this InitCheckResponse.  # noqa: E501
        :type: float
        """
        if (
            self.local_vars_configuration.client_side_validation and actual is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `actual`, must not be `None`"
            )  # noqa: E501

        self._actual = actual

    @property
    def init_check(self):
        """Gets the init_check of this InitCheckResponse.  # noqa: E501

        Exact meaning is unknown  # noqa: E501

        :return: The init_check of this InitCheckResponse.  # noqa: E501
        :rtype: bool
        """
        return self._init_check

    @init_check.setter
    def init_check(self, init_check):
        """Sets the init_check of this InitCheckResponse.

        Exact meaning is unknown  # noqa: E501

        :param init_check: The init_check of this InitCheckResponse.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation and init_check is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `init_check`, must not be `None`"
            )  # noqa: E501

        self._init_check = init_check

    @property
    def state_init(self):
        """Gets the state_init of this InitCheckResponse.  # noqa: E501

        Exact meaning is unknown  # noqa: E501

        :return: The state_init of this InitCheckResponse.  # noqa: E501
        :rtype: str
        """
        return self._state_init

    @state_init.setter
    def state_init(self, state_init):
        """Sets the state_init of this InitCheckResponse.

        Exact meaning is unknown  # noqa: E501

        :param state_init: The state_init of this InitCheckResponse.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and state_init is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `state_init`, must not be `None`"
            )  # noqa: E501

        self._state_init = state_init

    @property
    def total(self):
        """Gets the total of this InitCheckResponse.  # noqa: E501

        Total number of init steps  # noqa: E501

        :return: The total of this InitCheckResponse.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this InitCheckResponse.

        Total number of init steps  # noqa: E501

        :param total: The total of this InitCheckResponse.  # noqa: E501
        :type: float
        """
        if (
            self.local_vars_configuration.client_side_validation and total is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `total`, must not be `None`"
            )  # noqa: E501

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InitCheckResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InitCheckResponse):
            return True

        return self.to_dict() != other.to_dict()
